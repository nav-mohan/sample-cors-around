{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["console","log","App","useEffect","https","require","getPackage","Promise","resolve","reject","get","response","dataChunks","on","chunk","push","data","Buffer","concat","JSON","parse","toString","error","then","pkg","catch","resource","datastoreResources","filter","r","datastore_active","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wGAAA,sCAKAA,QAAQC,IADI,qHAgFGC,IA7Ef,WAqEE,OAnEAC,qBAAU,WACR,IAAMC,EAAQC,EAAQ,IAIpBC,EAAa,IAAIC,SAAQ,SAACC,EAASC,GACrCL,EAAMM,IAAN,uFAJkB,yCAIqF,SAACC,GACpG,IAAIC,EAAa,GACjBD,EACKE,GAAG,QAAQ,SAACC,GACTF,EAAWG,KAAKD,MAEnBD,GAAG,OAAO,WACP,IAAIG,EAAOC,EAAOC,OAAON,GACzBJ,EAAQW,KAAKC,MAAMJ,EAAKK,YAAhB,WAEXR,GAAG,SAAS,SAACS,GACVb,EAAOa,YAKvBhB,EAAWiB,MAAK,SAAAC,GAEZxB,QAAQC,IAAIuB,MACbC,OAAM,SAAAH,GACLtB,QAAQsB,MAAMA,MAsBlBhB,EAAWiB,MAAK,SAAAC,GAEZ,IApByBE,EAoBrBC,EAAqBH,EAAG,UAAcI,QAAO,SAAAC,GAAC,OAAIA,EAAEC,qBApB/BJ,EAuBJC,EAAmB,GAvBH,IAAIpB,SAAQ,SAACC,EAASC,GAC3DL,EAAMM,IAAN,2FAA8FgB,EAAQ,KAAU,SAACf,GAC7G,IAAIC,EAAa,GACjBD,EACKE,GAAG,QAAQ,SAACC,GACTF,EAAWG,KAAKD,MAEnBD,GAAG,OAAO,WACP,IAAIG,EAAOC,EAAOC,OAAON,GACzBJ,EAAQW,KAAKC,MAAMJ,EAAKK,YAAhB,mBAEXR,GAAG,SAAS,SAACS,GACVb,EAAOa,aAYdC,MAAK,SAAAG,GAEF1B,QAAQC,IAAIyB,MAEfD,OAAM,SAAAH,GACHtB,QAAQsB,MAAMA,SAEvBG,OAAM,SAAAH,GACLtB,QAAQsB,MAAMA,QAEb,IAID,qBAAKS,UAAU,MAAf,SACE,wBAAQA,UAAU,oB,oMClETC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACxC,EAAA,EAAD,MAEFyC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.aa7c98c7.chunk.js","sourcesContent":["import {React, useState,useEffect} from \"react\"\nimport './App.css';\n\nconst packageId = \"64b54586-6180-4485-83eb-81e8fae3b8fe\";\nconst url = \"https://ckan0.cf.opendata.inter.prod-toronto.ca/api/3/action/package_show?id=64b54586-6180-4485-83eb-81e8fae3b8fe\"\nconsole.log(url)\n\nfunction App() {\n\n  useEffect(() => {\n    const https = require(\"https\");\n    const packageId = \"64b54586-6180-4485-83eb-81e8fae3b8fe\";\n\n// promise to retrieve the package\nconst getPackage = new Promise((resolve, reject) => {\n    https.get(`https://ckan0.cf.opendata.inter.prod-toronto.ca/api/3/action/package_show?id=${packageId}`, (response) => {\n        let dataChunks = [];\n        response\n            .on(\"data\", (chunk) => {\n                dataChunks.push(chunk)\n            })\n            .on(\"end\", () => {\n                let data = Buffer.concat(dataChunks)\n                resolve(JSON.parse(data.toString())[\"result\"])\n            })\n            .on(\"error\", (error) => {\n                reject(error)\n            })\n    });\n});\n\ngetPackage.then(pkg => {\n    // this is the metadata of the package\n    console.log(pkg);\n}).catch(error => {\n    console.error(error);\n})\n// since this package has resources in the datastore, one can get the data rather than just the metadata of the resources\n// promise to retrieve data of a datastore resource \nconst getDatastoreResource = resource => new Promise((resolve, reject) => {\n    https.get(`https://ckan0.cf.opendata.inter.prod-toronto.ca/api/3/action/datastore_search?id=${resource[\"id\"]}`, (response) => {\n        let dataChunks = [];\n        response\n            .on(\"data\", (chunk) => {\n                dataChunks.push(chunk)\n            })\n            .on(\"end\", () => {\n                let data = Buffer.concat(dataChunks)\n                resolve(JSON.parse(data.toString())[\"result\"][\"records\"])\n            })\n            .on(\"error\", (error) => {\n                reject(error)\n            })\n    })\n});\n\n// get the package information again\ngetPackage.then(pkg => {\n    // get the datastore resources for the package\n    let datastoreResources = pkg[\"resources\"].filter(r => r.datastore_active);\n\n    // retrieve the first datastore resource as an example\n    getDatastoreResource(datastoreResources[0])\n        .then(resource => {\n            // this is the actual data of the resource\n            console.log(resource)\n        })\n        .catch(error => {\n            console.error(error);\n        })\n}).catch(error => {\n    console.error(error);\n})\n  }, [])  \n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}